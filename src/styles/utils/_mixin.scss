@use '../tokens/colors' as *;
@use '../tokens/spacing' as *;
@use '../tokens/typography' as *;
@use '../tokens/components' as components;
@use 'sass:map';
@use '../utils/functions' as fn;

@mixin visually-hidden {
	position: absolute;
	width: 1px;
	height: 1px;
	padding: 0;
	margin: -1px;
	overflow: hidden;
	clip: rect(0, 0, 0, 0);
	white-space: nowrap;
	border: 0;
}

@mixin line-clamp($lines) {
	display: -webkit-box;
	-webkit-line-clamp: $lines;
	-webkit-box-orient: vertical;
	overflow: hidden;
}

@mixin flex-center {
	display: flex;
	align-items: center;
	justify-content: center;
}

@mixin card-hover {
	transition:
		transform 0.2s ease,
		box-shadow 0.2s ease;
	&:hover {
		transform: translateY(-2px);
		box-shadow:
			0 4px 6px -1px rgba(0, 0, 0, 0.1),
			0 2px 4px -2px rgba(0, 0, 0, 0.1);
	}
}

@mixin interactive-element {
	transition: all 0.2s ease;
	cursor: pointer;
	&:focus {
		outline: none;
		box-shadow: 0 0 0 3px rgba(fn.color-shade($indigo, 500), 0.1);
	}
}

@mixin truncate {
	white-space: nowrap;
	overflow: hidden;
	text-overflow: ellipsis;
}

@mixin card-base($size: 'md') {
	padding: map.get(components.$card, 'padding', $size);
	border-radius: map.get(components.$card, 'radius', $size);
	box-shadow: map.get(components.$card, 'shadow', 'default');
	background: white;
}

@mixin button-base($size: 'md', $variant: 'primary') {
	$variants: map.get(components.$button, 'variants');
	$variant-props: map.get($variants, $variant);

	padding: map.get(components.$button, 'padding', $size);
	border-radius: map.get(components.$button, 'radius', $size);
	font-size: map.get(components.$button, 'font-size', $size);
	font-weight: map.get($font-weights, 'medium');
	background-color: map.get($variant-props, 'bg');
	color: map.get($variant-props, 'text');
	border: none;
	transition: all 0.2s ease;
	cursor: pointer;

	&:hover:not(:disabled) {
		background-color: map.get($variant-props, 'hover-bg');
	}

	&:disabled {
		opacity: 0.5;
		cursor: not-allowed;
	}
}

@mixin input-base($size: 'md') {
	padding: map.get(components.$input, 'padding', $size);
	border-radius: map.get(components.$input, 'radius', $size);
	border: 1px solid map.get(components.$input, 'border-color', 'default');
	transition: all 0.2s ease;

	&:focus {
		outline: none;
		border-color: map.get(components.$input, 'border-color', 'focus');
		box-shadow: 0 0 0 3px rgba(map.get($indigo, 500), 0.1);
	}
}

@mixin badge($variant: 'info') {
	$variants: map.get(components.$badge, 'variants');
	$variant-props: if($variants, map.get($variants, $variant), null);

	@if $variant-props {
		padding: map.get(components.$badge, 'padding');
		font-size: map.get(components.$badge, 'font-size');
		border-radius: map.get(components.$badge, 'radius');
		background: map.get($variant-props, 'bg');
		color: map.get($variant-props, 'color');
		font-weight: map.get($font-weights, 'medium');
	}
}

@mixin analytics-card($variant: 'primary') {
	@if $variant == 'primary' {
		background-color: map.get($indigo, 50);
		color: map.get($indigo, 700);
	} @else if $variant == 'success' {
		background-color: map.get($green, 50);
		color: map.get($green, 700);
	} @else if $variant == 'warning' {
		background-color: map.get($yellow, 50);
		color: map.get($yellow, 700);
	} @else if $variant == 'danger' {
		background-color: map.get($red, 50);
		color: map.get($red, 700);
	} @else {
		background-color: map.get($gray, 50);
		color: map.get($gray, 700);
	}

	padding: spacing(6);
	border-radius: spacing(3);
	transition: transform 0.2s ease;

	&:hover {
		transform: translateY(-2px);
	}
}
